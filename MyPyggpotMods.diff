diff --git a/internal/providers/coin/provider.go b/internal/providers/coin/provider.go
index ebe9cf9..107303b 100644
--- a/internal/providers/coin/provider.go
+++ b/internal/providers/coin/provider.go
@@ -4,12 +4,15 @@ import (
 	"context"
 	"database/sql"
 	"fmt"
+
+	"math/rand"
+
 	"github.com/aspiration-labs/pyggpot/internal/models"
-	"github.com/aspiration-labs/pyggpot/rpc/go/coin"
+	coin_service "github.com/aspiration-labs/pyggpot/rpc/go/coin"
 	"github.com/twitchtv/twirp"
 )
 
-type coinServer struct{
+type coinServer struct {
 	DB *sql.DB
 }
 
@@ -31,9 +34,9 @@ func (s *coinServer) AddCoins(ctx context.Context, request *coin_service.AddCoin
 	for _, coin := range request.Coins {
 		fmt.Println(coin)
 		newCoin := models.Coin{
-			PotID: request.PotId,
+			PotID:        request.PotId,
 			Denomination: int32(coin.Kind),
-			CoinCount: coin.Count,
+			CoinCount:    coin.Count,
 		}
 		err = newCoin.Save(tx)
 		if err != nil {
@@ -50,6 +53,58 @@ func (s *coinServer) AddCoins(ctx context.Context, request *coin_service.AddCoin
 	}, nil
 }
 
-func (s *coinServer) RemoveCoins(context.Context, *coin_service.RemoveCoinsRequest) (*coin_service.CoinsListResponse, error) {
-	panic("implement me")
+func (s *coinServer) RemoveCoins(ctx context.Context, request *coin_service.RemoveCoinsRequest) (*coin_service.CoinsListResponse, error) {
+	if err := request.Validate(); err != nil {
+		return nil, twirp.InvalidArgumentError(err.Error(), "")
+	}
+
+	tx, err := s.DB.Begin()
+	if err != nil {
+		return nil, twirp.InternalError(err.Error())
+	}
+	coins, err := models.CoinsInPotsByPot_id(tx, int(request.PotId))
+	if err != nil {
+		return nil, twirp.InternalError(err.Error())
+	}
+
+	var idx = 0
+	var respData = make(map[coin_service.Coins_Kind]int)
+	for idx <= int(request.Count) && len(coins) >= 0 {
+
+		randNum := rand.Intn(len(coins) - 1)
+
+		c := *coins[randNum]
+		c.CoinCount = c.CoinCount - 1
+		idx = idx + 1
+		if c.CoinCount == 0 {
+			coins = append(coins[:randNum], coins[randNum+1:]...)
+			continue
+		}
+		cm := models.Coin{
+			ID:           c.ID,
+			Denomination: c.Denomination,
+			PotID:        request.PotId,
+			CoinCount:    c.CoinCount,
+		}
+		err = cm.Update(tx)
+		if err != nil {
+			tx.Rollback()
+			return nil, err
+		}
+		respData[coin_service.Coins_Kind(cm.Denomination)] = respData[coin_service.Coins_Kind(cm.Denomination)] + 1
+
+	}
+
+	respList := []*coin_service.Coins{}
+
+	for k, v := range respData {
+		cs := coin_service.Coins{
+			Kind:  k,
+			Count: int32(v),
+		}
+		respList = append(respList, &cs)
+	}
+
+	return &coin_service.CoinsListResponse{Coins: respList}, nil
+
 }
diff --git a/proto/pot/service.proto b/proto/pot/service.proto
index ce31dfa..2e33860 100644
--- a/proto/pot/service.proto
+++ b/proto/pot/service.proto
@@ -36,7 +36,7 @@ message CreatePotRequest {
     string pot_name = 1 [
         (validator.field) = {
             regex: "^[A-Za-z0-9]{2}(?:[ _-]?[A-Za-z0-9])+$"
-            human_error: "Can contain only alphanumeric characters, dot and underscore."
+            human_error: "Can contain only alphanumeric characters, hyphen and underscore,First two letters should be alphanumeric and special characters should only be used as seperators."
         }
     ]; // required
     int32 max_coins = 2 [(validator.field) = {int_gt:5}];
